knitr::opts_chunk$set(echo=TRUE)
# Download shapefiles from geoportal
# URL for the direct download of the shapefile
url <- "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Local_Authority_Districts_May_2022_UK_BFE_V3_2022/FeatureServer/replicafilescache/Local_Authority_Districts_May_2022_UK_BFE_V3_2022_3331011932393166417.zip"
# Destination file path
dest_dir <- "Shapefiles"
dest_file <- file.path(dest_dir, "shapefile.zip")
# Download shapefile
download.file(url, destfile = dest_file)
# Read in shapefile to a simple features object
# st_read() reads in spatial data to a 'simple features' object
download.file(url = url, destfile = dest_file, mode = "wb")
# Download shapefiles from geoportal
# URL for the direct download of the shapefile
url <- "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Local_Authority_Districts_May_2022_UK_BFE_V3_2022/FeatureServer/replicafilescache/Local_Authority_Districts_May_2022_UK_BFE_V3_2022_3331011932393166417.zip"
# Destination file path
dest_dir <- "Shapefiles"
dest_file <- file.path(dest_dir, "shapefile.zip")
# Download shapefile
# Read in shapefile to a simple features object
# st_read() reads in spatial data to a 'simple features' object
download.file(url = url, destfile = dest_file, mode = "wb")
# Unzip the file within the destination directory
unzip(dest_file, exdir = dest_dir)
sf_data <- st_read("Shapefiles/LAD_MAY_2022_UK_BFE_V3.shp")
# used to read-in datasets
library(readr)
# used to manipulate datasets
library(dplyr)
# used to read-in spatial data, shapefiles
library(sf)
# used to create interactive maps
library(leaflet)
# Read in shapefile to a simple features object
# st_read() reads in spatial data to a 'simple features' object
sf_data <- st_read("Shapefiles/LAD_MAY_2022_UK_BFE_V3.shp")
rmd2jupyter("Leaflet_map1.Rmd")
library(rmd2jupyter)
devtools::install_github("mkearney/rmd2jupyter")
install.packages("devtools")
devtools::install_github("mkearney/rmd2jupyter")
rmd2jupyter("Leaflet_map.Rmd")
library(rmd2jupyter)
rmd2jupyter("Leaflet_map.Rmd")
# Download shapefiles from geoportal
# URL for the direct download of the shapefile
url <- "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Local_Authority_Districts_May_2022_UK_BFE_V3_2022/FeatureServer/replicafilescache/Local_Authority_Districts_May_2022_UK_BFE_V3_2022_3331011932393166417.zip"
# Get the current working directory
current_dir <- getwd()
# Construct absolute path
dest_dir <- file.path(current_dir, "Shapefiles")
dest_file <- file.path(dest_dir, "shapefile.zip")
# Download shapefile
download.file(url = url, destfile = dest_file, mode = "wb")
# Unzip the file within the destination directory
unzip(dest_file, exdir = dest_dir)
rmd2jupyter("Leaflet_map.Rmd")
rmd2jupyter("Leaflet_map.Rmd")
knitr::opts_chunk$set(echo=TRUE)
# install.packages("leaflet")
# install.packages("sf")
# install.packages("dplyr")
# install.packages("readr")
# used to read-in datasets
library(readr)
# used to manipulate datasets
library(dplyr)
# used to read-in spatial data, shapefiles
library(sf)
# used to create interactive maps
library(leaflet)
# First, let's read in our gender identity dataset
df <- read_csv('../Data/GI_det.csv')
df <- read_csv('Data/GI_det.csv')
head(df, 10)
knitr::opts_chunk$set(echo=TRUE)
# install.packages("leaflet")
# install.packages("sf")
# install.packages("dplyr")
# install.packages("readr")
# used to read-in datasets
library(readr)
# used to manipulate datasets
library(dplyr)
# used to read-in spatial data, shapefiles
library(sf)
# used to create interactive maps
library(leaflet)
# First, let's read in our gender identity dataset
df <- read_csv('Data/GI_det.csv')
# Use head function to check out the first few rows - but can also access df via environment pane
head(df, 10)
# Rename columns using the rename function from dplyr
# Specify what you want to rename the column to, and supply the original column string
df <- df %>%
rename(LA_code = `Lower tier local authorities Code`,
# backticks ` necessary when names are syntactically invalid, e.g. spaces, special characters etc.
LA_name = `Lower tier local authorities`,
GI_code = `Gender identity (8 categories) Code`,
GI_cat = `Gender identity (8 categories)`)
# Let's use the colnames function to see if it worked
colnames(df)
# Use dplyr's filter function to get rid of 'Does not apply'
# Use '!=' to keep everything except 'Does not apply' category
df <- df %>% filter(GI_cat != 'Does not apply')
# Unique function can be applied to a column in a df to see which values are in that column
# Let's see if 'Does not apply' has been successfully dropped
unique(df$GI_cat)
# Use group_by to group the dataframe by the LA_name column
# Use mutate to perform calculation within each LA_name group, convert result to a % by multiplying by 100
# round() is used to round %'s to 2 decimal places
df <- df %>%
group_by(LA_name) %>%
mutate(Percentage = round(Observation / sum(Observation) * 100, 2))
# Let's check out the results
head(df, 10)
# Use filter() to only keep rows where GI_cat equals 'Trans man'
df <- df %>%
filter(GI_cat == 'Trans man') %>%
# Use select() with '-' to remove 'Observation' column
select(-Observation) %>%
# Use distinct() to remove duplicate rows, as a precaution
distinct() %>%
# Use ungroup() to remove grouping - resetting the dataframes state after performing group operations is good practice
ungroup()
# Let's take a look at the results
head(df)
# Download shapefiles from geoportal
# URL for the direct download of the shapefile
url <- "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Local_Authority_Districts_May_2022_UK_BFE_V3_2022/FeatureServer/replicafilescache/Local_Authority_Districts_May_2022_UK_BFE_V3_2022_3331011932393166417.zip"
# Get the current working directory
current_dir <- getwd()
# Construct absolute path
dest_dir <- file.path(current_dir, "Shapefiles")
dest_file <- file.path(dest_dir, "shapefile.zip")
# Download shapefile
download.file(url = url, destfile = dest_file, mode = "wb")
# Unzip the file within the destination directory
unzip(dest_file, exdir = dest_dir)
# Read in shapefile to a simple features object
# st_read() reads in spatial data to a 'simple features' object
sf_data <- st_read("Shapefiles/LAD_MAY_2022_UK_BFE_V3.shp")
# Let's check it out
head(sf)
sf <- st_read("Shapefiles/LAD_MAY_2022_UK_BFE_V3.shp")
# Let's check it out
head(sf)
# Inspect dimensions
dim(sf)
length(unique(sf$LAD22NM))
sf <- sf %>%
rename(LA_code = LAD22CD,
LA_name = LAD22NM)
# Use rename function so sf columns match those in original df
sf <- sf %>%
rename(LA_code = LAD22CD,
LA_name = LAD22NM)
# Replace specific values in the LA_name column using recode()
sf$LA_name <- sf$LA_name %>%
recode(`Bristol, City of` = "Bristol",
`Kingston upon Hull, City of` = "Kingston upon Hull",
`Herefordshire, County of` = "Herefordshire")
# Use filter() with %in% and unique() to only keep LA's that match
sf <- sf %>%
filter(LA_code %in% unique(df$LA_code))
# Let's see how it looks..
# We should have 331 unique LA_codes
length(unique(sf$LA_code))
# st_crs() shows our CRS info
st_crs(sf)
# To transform our crs to EPSG: 4326, simply use st_transform() and specify the crs
# Note: you don't have to use the %>% pipe operator all the time
sf <- st_transform(sf, crs = 4326)
# Merge the dataframes
merged <- merge(sf, df, by = c('LA_code', 'LA_name'))
# Let's check it out
head(merged)
plot(sf[1, 'geometry'])
# Define the color palette for filling in our multipolygon shapes
# domain sets the range of data values that the colour scale should cover
color_palette <- colorNumeric(palette = "YlGnBu", domain = merged$Percentage)
# Use leaflet function with 'merged' dataset
uk_map <- leaflet(merged) %>%
# Centers the map on long and lat for UK
setView(lng = -3.0, lat = 53, zoom = 6) %>%
# Adds default map tiles (the visual image of the map)
addTiles() %>%
# Adds multipolygons to the map, and colours them based on the 'Percentage' column
# We use the palette we created above
addPolygons(
fillColor = ~color_palette(Percentage),
weight = 1, # Set the border weight to 1 for thinner borders
color = "#000000",
fillOpacity = 0.7,
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
label = ~paste(LA_name, ":", Percentage, "%"), # This will create tooltips showing the info
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px", direction = "auto") # Adjust text size as needed
) %>%
addLegend(pal = color_palette, values = ~Percentage, opacity = 0.7, title = "Percentage", position = "topright")
# Render the map
uk_map
rmd2jupyter("Leaflet_map.Rmd")
library(rmd2jupyter)
rmd2jupyter("Leaflet_map.Rmd")
